<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Bjørn Fjukstad</title>
    <link>http://fjukstad.github.com/blog/</link>
    <description>Recent content in Blog on Bjørn Fjukstad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>bjornfjukstad@gmail.com (Bjørn Fjukstad)</managingEditor>
    <webMaster>bjornfjukstad@gmail.com (Bjørn Fjukstad)</webMaster>
    <lastBuildDate>Mon, 14 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://fjukstad.github.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Synthetic Patient Data</title>
      <link>http://fjukstad.github.com/blog/synthetic-data/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      <author>bjornfjukstad@gmail.com (Bjørn Fjukstad)</author>
      <guid>http://fjukstad.github.com/blog/synthetic-data/</guid>
      <description>When we&amp;rsquo;re developing software systems, it&amp;rsquo;s useful to fill them with data to illustrate and test how they work. For example, to show that the online store we are developing works as expected, we fill it up with products that we can purchase. Likewise, when we&amp;rsquo;re developing electronic health record (EHR) systems, it&amp;rsquo;s useful to fill them up with patient data.
While we can use real products to fill online stores, we cannot fill the EHR system we are developing with real patient data.</description>
    </item>
    
    <item>
      <title>Configuration and environment variables in .NET Core</title>
      <link>http://fjukstad.github.com/blog/config-and-environment-variables/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      <author>bjornfjukstad@gmail.com (Bjørn Fjukstad)</author>
      <guid>http://fjukstad.github.com/blog/config-and-environment-variables/</guid>
      <description>I&amp;rsquo;m working on moving services from Windows to Linux, and ran into an interesting bit on how .NET handles configuration from environment variables. Ususally we store configurations in appsettings.json files like this
{&amp;#34;key&amp;#34;: &amp;#34;value&amp;#34;,&amp;#34;another&amp;#34;: {&amp;#34;key&amp;#34;: &amp;#34;another-value&amp;#34;}}where we access the values with configuration.GetValue(&amp;quot;key&amp;quot;) and configuration.GetValue(&amp;quot;another:key&amp;quot;) We can also write the config more compact like this:
{&amp;#34;key&amp;#34;: &amp;#34;value&amp;#34;,&amp;#34;another:key&amp;#34;: &amp;#34;another-value&amp;#34;}While configurations in appsettings.json files are great, it is often handy to use environment variables for configurations, e.</description>
    </item>
    
    <item>
      <title>Personal ECGs with the Withings Move ECG</title>
      <link>http://fjukstad.github.com/blog/withings/</link>
      <pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate>
      <author>bjornfjukstad@gmail.com (Bjørn Fjukstad)</author>
      <guid>http://fjukstad.github.com/blog/withings/</guid>
      <description>Last week I got hold of the Withings Move ECG, an analog smart watch that can record electrocardiograms (ECGs). While recording ECGs has been available on the Apple Watches, Withings is the only company that has easily opened up the raw ECG data through their API. There are rumors that Apple will allow 3rd party developers to read the raw ECG data in iOS 14. Withings on the other hand has included raw ECG data in their API since October 2019.</description>
    </item>
    
    <item>
      <title>.NET Core tools and Github Actions</title>
      <link>http://fjukstad.github.com/blog/scrub/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      <author>bjornfjukstad@gmail.com (Bjørn Fjukstad)</author>
      <guid>http://fjukstad.github.com/blog/scrub/</guid>
      <description>TL;DR .NET Core tools are a great way of developing small platform-independent command line tools with C# and .NET. Github Actions are really great for automating the whole process of building, and publishing these tools.
Introduction Recently I have been switching a lot between Powershell on Windows and bash in Ubuntu in WSL to get some of our openEHR components in .NET running on Linux.
Since I was switching back and forth between the different shells, there were times when I wished I had access to the same tools in both shells.</description>
    </item>
    
    <item>
      <title>Open-sourcing openEHR packages</title>
      <link>http://fjukstad.github.com/blog/open-sourcing-openehr-packages/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      <author>bjornfjukstad@gmail.com (Bjørn Fjukstad)</author>
      <guid>http://fjukstad.github.com/blog/open-sourcing-openehr-packages/</guid>
      <description>This spring I have adviced a group of four bachelor students in computer science from UiT campus Bodø. The team has worked on machine learning on openEHR data, and as a result have produced a lot of great software.
Two of the packages the team has developed on are openehR and openehpy. These are packages for retrieving data from an openEHR server through its openEHR REST API. Both packages get data from an openEHR REST API, and you can use the pacakges to get data from any system that implements the API.</description>
    </item>
    
    <item>
      <title>Analyzing COVID-19 data at DIPS</title>
      <link>http://fjukstad.github.com/blog/openehr-covid-19/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      <author>bjornfjukstad@gmail.com (Bjørn Fjukstad)</author>
      <guid>http://fjukstad.github.com/blog/openehr-covid-19/</guid>
      <description>A couple of weeks ago I published a post on how we enable data science at DIPS, which told the story on how we can get data from our openEHR server in the R programming language. To make things even more interesting, this post will show how we can get screening symptoms from COVID-19 patients registered in our openEHR Server in DIPS Arena. With this data we can create reports with R Markdown, beautiful Shiny dashboards, and open up for researchers to explore and analyze the data in their own environment.</description>
    </item>
    
    <item>
      <title>p5.js</title>
      <link>http://fjukstad.github.com/blog/p5js/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      <author>bjornfjukstad@gmail.com (Bjørn Fjukstad)</author>
      <guid>http://fjukstad.github.com/blog/p5js/</guid>
      <description>In Bodø I help organize local the coding club. Because of the covid-19 situation we are hosting the club on Discord, rather than in person at the public library in Bodø. This afternoon the participants were working fairly idependent, so I had some time to sit down some more with p5.js.
p5.js is a great Javascript library for creating visual content in the web browser, e.g. animations, games, art etc. In short a p5.</description>
    </item>
    
    <item>
      <title>Enabling Data Science in DIPS</title>
      <link>http://fjukstad.github.com/blog/enabling-data-science-in-dips/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      <author>bjornfjukstad@gmail.com (Bjørn Fjukstad)</author>
      <guid>http://fjukstad.github.com/blog/enabling-data-science-in-dips/</guid>
      <description>At DIPS we are currently productionizing our new electronic health record (EHR) system, DIPS Arena. With DIPS Arena we have made the move to store structured clinical data with openEHR. openEHR is an open technology for e-health systems that help different vendors to build interoperable systems for healthcare. In other words, it helps define the different clinical concepts, e.g. blood pressures, body temperatures etc, how we can represent them, and how we can retrieve them from systems that implement an openEHR API.</description>
    </item>
    
    <item>
      <title>Soltimer Påsken 2020</title>
      <link>http://fjukstad.github.com/blog/sun-hours/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate>
      <author>bjornfjukstad@gmail.com (Bjørn Fjukstad)</author>
      <guid>http://fjukstad.github.com/blog/sun-hours/</guid>
      <description>Meteorologene på twitter skrev en tweet om hvor mange soltimer det hadde vært i påska.
Av bildet kan det se ut som om solene er skalert opp og ned basert på antall soltimer. Selv om Oslo har nesten 7 ganger så mange soltimer som Tromsø, virker det ikke som om at størrelsen på solene reflekterer dette. Her er et eksempel på hvordan man kunne lagd en lignende visualisering i R</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>http://fjukstad.github.com/blog/hello-world/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      <author>bjornfjukstad@gmail.com (Bjørn Fjukstad)</author>
      <guid>http://fjukstad.github.com/blog/hello-world/</guid>
      <description>I have been wanting to get started with technical writing for a while now. Hopefully, re-writing my fjukstad.github.io website to use hugo, and creating a /blog menu item on my website will get me started.
At the moment I am working on data analysis and visualization of covid-19 data for the company I work at, DIPS, and I believe that the first real post will be about just that. For those of you who do not know, DIPS is both the name of the company, and the name of the electronic patient health record systems used by the majority of Norwegian hospitals.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://fjukstad.github.com/blog/predicting-diabetes-with-openehr/predicting-diabetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>bjornfjukstad@gmail.com (Bjørn Fjukstad)</author>
      <guid>http://fjukstad.github.com/blog/predicting-diabetes-with-openehr/predicting-diabetes/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>